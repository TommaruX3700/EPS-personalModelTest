Hash table:

std :: unhordered_set
    Properties:
        > associative
            elements are referenced by their key
        > unordered
            access to elements granted by keys, not sorted nor continuos (memory allocation speaking)
        > set
            value = key 
        > unique keys  
            No two elements can have equivalent keys
        > allocator-aware
            dynamically allocates memory if its needed
    
    containers that stores element without an order, it allows fast retrival of individual elements based 
    upon their value (key) which one is UNIQUE. 
    Keys are IMMUTABLE, therefore elements in this containers cannot be modified once added, just inserted
    or removed.
    Inside the unhordered_set, elements are organized into BUCKETS, depending on their hash values, to 
    allow fast access to individual elements directly by their values (KEYS).

    source: https://cplusplus.com/reference/unordered_set/unordered_set/


std :: unhordered_map
    Properties:
        > associative
            elements are referenced by their key
        > unordered
            access to elements granted by keys, not sorted nor continuos (memory allocation speaking)
        > set
            key -> mapped value 
        > unique keys  
            No two elements can have equivalent keys
        > allocator-aware
            dynamically allocates memory if its needed

    source: https://cplusplus.com/reference/unordered_map/unordered_map/


std :: unhordered_multimap
    Properties:
        > associative
            elements are referenced by their key
        > unordered
            access to elements granted by keys, not sorted nor continuos (memory allocation speaking)
        > map
            key -> element
        > multiple equivalent keys  
            multiple elements with the same key permitted
        > allocator-aware
            dynamically allocates memory if its needed
    
    ASSOCIATIVE containers that store elements formed by combination of a key value and a mapped value.
    It's like unhordered_map containers, but allows different elements to have equivalent keys.

    source: https://cplusplus.com/reference/unordered_map/unordered_multimap/
    

Hash tables search alghoritms has a very likely costant/average time complexity.

Typical Hash Tables applications: 

> Caching:
    Hash tables are often used in caching applications, where frequently accessed data can be stored 
    in a fast-access, in-memory cache.

> Dictionary and Spell Checkers: 
    Hash tables can be used to implement dictionaries and spell checkers, by storing words and their 
    meanings in a hash table.

> Database Indexing:
    Hash tables can be used to index large databases, allowing for fast lookup and retrieval of data.

> Counting:
    Hash tables can be used to keep track of the frequency of occurrences of elements in a set.

> Cryptographic Applications:
    Hash tables are often used in cryptography applications, such as password storage and digital 
    signatures.

> Symbol Tables:
    Hash tables can be used to implement symbol tables, where the key is a symbol and the value is 
    its associated attributes.

> Network Routing:
    Hash tables can be used in network routing algorithms to map IP addresses to network paths.

> Load Balancing:
    Hash tables can be used in load balancing algorithms to distribute traffic among multiple 
    servers based on the hash of the incoming request.

> Compiler Optimization:
    Hash tables can be used in compiler optimization to merge duplicate code fragments.

> Spell Checkers:
    Hash tables can be used to implement spell checkers, by storing words and their meanings in a hash
    table and checking whether a word exists in the table.