{
	"nodes":[
		{"type":"text","text":"# Cell (.cpp)\n\n### Uso:\n* ","id":"a6a92968dbf192ec","x":1269,"y":-7138,"width":597,"height":220,"color":"3"},
		{"type":"text","text":"# (_virtual_) class 3D_object (.h)\n\n### Variabili:\n```cpp\n3D<float> objectDims\n3D<float> oldObject_Dims //evaluate\n3D<float> center\nfloat weight\nfloat density\n```\n---\n### Metodi:\n```cpp\n~3D_object() {}\nvoid setDims(float x, float y, float z)\nvoid setCenterCoords(dims)\nvoid setWeight(float kg)\nvoid setOrientation(int orientation)\nfloat getVolume()\nfloat getDensity()\n3D<float> out_dims getDims()\n```\n---\n### TODO:\n* dentro i metodi \"set\" posso andare a settare direttamente i valori in template tramite assegnazione \"=\", gli struct dovrebbero poter assegnarsi tranquillamente.\n---\n### Documentazione: \nClasse virtuale che definisce tutte le caratteristiche di un oggetto 3D del progetto, più metodi che fanno calcoli semplici e le basi dei metodi \"SET\".","id":"bcd9347dfc4e83a5","x":247,"y":-7065,"width":781,"height":945,"color":"4"},
		{"type":"text","text":"# class Pallet : 3D_object (.h)\n\n### Variabili:\n```cpp\n//out of class\ntypedef Pack* ptrPack;\n\n//inside class\nprivate:\n\tfloat param_Efficency;\n\tstd::vector<ptrPack> pallet;\n```\n---\n### Metodi:\n```cpp\nPallet();\nPallet(float X, float Y, float Z);\n~Pallet();\n\nvoid add_Pack(ptrPack);\nvoid add_Pack(ptrPack, int vectorPosition = NULL);\nvoid remove_Pack(); //deletes the last one\nvoid remove_Pack(int vectorPosition = -1);\nint pack_Count(); //evaluate if necessary: look at <vector> methods\n```\n---\n### TODO:\n* valutare eventuale implementazione di override degli operatori C++ appositamente x i pallet\n* ricordarsi che Pallet eredita tutto 3D_object e che può sfruttare il template 3D dims\n---\n### Documentazione: \nAndando a ereditare tutte le variabili e metodi (da overriddare) dalla classe virtuale, Pallet.h ottiene già ereditate le dimensioni in quanto oggetto 3D e metodi utili per la successiva valutazione dello stesso/ottenimento di dati e info complessive varie.","id":"9a1e79440b7722be","x":-774,"y":-6615,"width":820,"height":1015,"color":"4"},
		{"type":"text","text":"# (_virtual_) 3D_object (.cpp)\n\n### Uso:\n* andare a definire tutte le funzioni TRANNE i \"SET\" (verranno definiti nella classe figlia)","id":"e4bc571b033bfe8e","x":339,"y":-6075,"width":597,"height":220,"color":"3"},
		{"type":"text","text":"# class PalletGroup (.h)\n\n### Variabili:\n```cpp\n//out of class\ntypedef Pallet* ptrPallet;\n\n//inside class\nprivate:\n\tstd::vector<ptrPallet> palletGroup;\n\tint max = 0\n```\n---\n### Metodi:\n```cpp\nPalletGroup();\nPalletGroup(int max);\n~PalletGroup();\n\nvoid set_maximum(int a);\nint add_Pallet(ptrPallet);\nint add_Pallet(ptrPallet, int vectorPosition = -1);\nint remove_Pallet(); //deletes the last one\nint remove_Pallet(int vectorPosition = -1);\nint pallet_Count(); //evaluate if necessary: look at <vector> methods\n```\n---\n### TODO:\n* \n---\n### Documentazione: \nQuesta classe identifica un vettore di puntatori ad oggetti \"Pallet\" che si raggruppano e formano una serie di pallets pronti per essere esportati in output.","id":"32936dd609fc592f","x":-774,"y":-5575,"width":820,"height":1155,"color":"4"},
		{"type":"text","text":"# PalletGroup (.cpp)\n\n### Uso:\n* andare a definire tutte le funzioni PalletGroup","id":"22601776f8ec70d0","x":-1577,"y":-5200,"width":597,"height":170,"color":"3"},
		{"type":"text","text":"# Pallet (.cpp)\n\n### Uso:\n* andare a definire tutte le funzioni Pallet\n* andare a fare override di tutte le funzioni \"SET\" di 3D_object x i pallet","id":"f85fea1dcfbba0a3","x":-1610,"y":-6295,"width":597,"height":220,"color":"3"},
		{"type":"text","text":"# class Plane (.h)\n\n### Variabili:\n```cpp\nprivate:\n\tint maxX, maxY;\n\tCell plane**;\n```\n---\n### Metodi:\n```cpp\npublic:\n\tPlane();\n\tPlane(int maxX, int maxY);\n\t\n\t~Plane();\n```\n---\n### TODO:\n- [ ] definire operazioni su celle (da usare poi direttamente da Grid)\n- [ ] \n---\n### Documentazione: \nPiano è definito da una singola matrice bidimensionale di variabili Struct Cell.","id":"a0494b72f9c94454","x":2167,"y":-8112,"width":801,"height":718,"color":"5"},
		{"type":"text","text":"# class Grid (.h)\n\n### Variabili:\n```cpp\nprivate:\n\tplane XY, XZ, YZ;\n```\n---\n### Metodi:\n```cpp\npublic:\n\tGrid(int x, int y, int z);\n\t~Grid();\n```\n---\n### TODO:\n* \n---\n### Documentazione: \n","id":"020989c845b9390a","x":3267,"y":-8096,"width":740,"height":686,"color":"5"},
		{"type":"text","text":"# Cell (.cpp)\n\n### Uso:\n* ","id":"1d11200d1f946bb6","x":2269,"y":-7138,"width":597,"height":220,"color":"3"},
		{"type":"text","text":"# Cell (.cpp)\n\n### Uso:\n* ","id":"69cea4cc5281e303","x":3339,"y":-7138,"width":597,"height":220,"color":"3"},
		{"type":"text","text":"# Cell (.h)\n\n```cpp\nstruct Cell {\n\t2D_coords<float> coords;\n\tbool isFree;\n\tPack* pack = nullptr;\n}\n```\n---\n### TODO:\n- [ ] valutare se rimuovere questo elemento e lavorare direttamente con matrici bidimensionali di puntatori a pacco dentro Plane.h, semplificando il progetto ed evitanto di creare 50k di oggetti cella a piano (considerando un pallet di 150cmX150cmX150cm, sono circa 22500 celle per un totale di 67,500 oggetti)\n---\n### Documentazione: \nDefinizione di singola cella.","id":"4581eeb8e87df3cf","x":1167,"y":-8033,"width":801,"height":673,"color":"5"},
		{"type":"text","text":"# Geometry (.h)\n\n### Variabili:\n\n```cpp\ntemplate<typename type>\nstruct 3D_coords { //type for 3D coordinates\n\ttype X, Y, Z;\n\t3D_coords() : X(type(0.0)), Y(type(0.0)), Z(type(0.0)) {}; //general constructor\n\t3D_coords(type x_val, type y_val, type z_val) : X(type(x_val)), Y(type(y_val)), Z(type(z_val)) {}; //specific constructor\n};\n\ntemplate<typename type>\nstruct 2D_coords { //type for 2D coordinates\n\ttype X, Y;\n\t2D_coords() : X(type(0)), Y(type(0)) {};\n\t2D_coords(type x_val, type y_val) : X(type(x_val)), Y(type(y_val)) {};\n};\n```\n\n---\n### Uso:\nRaggruppare sotto uno stesso template tutte le definizioni dei tipi usate nel progetto.\nInizialmente, genera un tipo generico (per permettere la creazione delle istanze virtuali), poi successivamente permette la creazione di struct sia di tipo float che di tipo int (o qualsiasi altro tipo, occhio) e la conseguente assegnazione alle variabili definite dalle classi figlie.","id":"341978063eeea840","x":-980,"y":-8080,"width":1156,"height":686,"color":"6"},
		{"type":"text","text":"# OrdinamentoPacchi.mod (.cpp)\n---\n### Variabili:\n```cpp\nstd::vector<Pack*> pacchiDaOrdinare; //INPUT\nstd::vector<Pack*> pacchiOrdinati; //OUTPUT1\nstd::vector<Pack*> pacchiNonPallettizzabili; //OUTPUT2-> pacchi flaggati come non pallettizzabili\n```\n\n---\n### Documentazione:\n* Modulo con input e output (da definire), che esegue Ordinamento degli Input\n* Dentro i moduli vanno definiti gli algoritmi stessi, definiti da INPUT e OUTPUT.\n* Le varibili \"rougue\" vanno IL PIU possibile definite dentro i file \"operation\" (funzioni)","id":"0a522b20fa4bdaea","x":1282,"y":-6680,"width":885,"height":527,"color":"2"},
		{"type":"text","text":"# SceltaPacchiNesting (.h)\n---\n### Includes:\n```cpp\ninclude \"genericIncludes.h\";\ninclude \"Pack.h\";\n```\n---\n### Documentazione:\n\n* include tipi definiti x le operazioni del modulo e dei \"sotto-moduli\"","id":"d9bd45575221c7d3","x":2403,"y":-6178,"width":740,"height":390,"color":"4"},
		{"type":"text","text":"op1_SceltaPacchiNesting (.cpp)\n---\n### Documentazione:\n\n* include tipi definiti x le operazioni del modulo e dei \"sotto-moduli\"","id":"7fd2b193f9ca4149","x":2403,"y":-5713,"width":740,"height":200,"color":"3"},
		{"type":"text","text":"op1_OrdinamentoInput (.cpp)\n---\n### Documentazione:\n\n* include tipi definiti x le operazioni del modulo e dei \"sotto-moduli\"","id":"613d8e6822959681","x":1355,"y":-5598,"width":740,"height":200,"color":"3"},
		{"type":"text","text":"# genericIncludes (.h)\n--- \n### Includes:\n```cpp\ninclude <vector>;\ninclude <set>; //per dominii, vedere se hanno senso x ste operazioni\n```\n---\n### Documentazione:\n\n* includes comuni a molti files","id":"e65bf9b7e285edbb","x":2513,"y":-5388,"width":630,"height":455,"color":"4"},
		{"type":"text","text":"# trovaDominio.mod (.cpp) (ALG1_1)\n---\n### Variabili:\n```cpp\nstd::vector<Pack*> pacchiDaOrdinare; //INPUT\n\n```\n---\n### Documentazione:\n* questo modulo si occupa di trovare la configurazione di ROOT\n* Dentro i moduli vanno definiti gli algoritmi stessi, definiti da INPUT e OUTPUT.\n* Le varibili \"rougue\" vanno IL PIU possibile definite dentro i file \"operation\" (funzioni)","id":"ba0e0c21f2d582e8","x":1283,"y":-5218,"width":885,"height":420,"color":"2"},
		{"type":"text","text":"# trovaDominio (.h)\n---\n### Includes:\n```cpp\ninclude \"genericIncludes.h\";\ninclude \"Pack.h\";\n```\n---\n### Documentazione:\n\n* include tipi definiti x le operazioni del modulo e dei \"sotto-moduli\"","id":"a93d9564772b8144","x":1355,"y":-4676,"width":740,"height":390,"color":"4"},
		{"type":"text","text":"# main(argv = percorso del file .json) (.cpp)\n--- \n### Includes:\n```cpp \ninclude \"genericIncludes.h\"\ninclude \"Pack.h\" //sperando che sta roba non crei dipendenze circolari con i singoli moduli, da controllare\n```\n\n--- \n### Variabili:\n``` cpp\nstd::vector<Pack> input; //INPUT_MAIN: pacchi recuperati dalla lettura del fine json\nstd::vector<Pack*> nestedOutput; //pacchi \"pallettizzati\" da utilizzare nelle operazioni temporanee sul pallet corrente\nstd::vector<Pack*> notNestableOutput; //pacchi non pallettizzabili e che vanno messi su un pallet loro singolarmente\nstd::vector<Pack*> unNested; //pacchi non pallettizzati ma x le seconde iterazioni\nstd::vector<Pallet*> palletGroup; //OUTPUT_MAIN a fini di debug e testing: da capire come passare in output al resto del progetto i dati\n```\n---\n\n### Organizzazione: \n\n1. Lettura json e compilazione \"input\" \n2. Loop pallet (fino a quando non finiscono i pacchi in \"input\")\n\t1. esegue modulo \"Ordinamento Input\"\n\t2. esegue modulo \"SceltaPacchiNesting\"\n\t3. Nesting: scrivo il loop e ci faccio eseguire dentro i moduli di ALG1 e ALG2 + controllo e ottimizzazione \n\t\t1. ALG1: il loop (e gestione dei suoi due output possibili) definito qui dentro, mentre ALG1_1 in modulo\n\t\t2. ALG2: definito in modulo suo\n\t\t3. Ottimizzazione (da capire come inputare a ALG1 il set di punti \"bannati\")\n\t4. Output pallet (aggiungo pallet a vettore \"palletGroup\")\n3. Unione Nested Pallets con Pacchi non pallettizzati (sul loro personale pallet) \n4. Output pallet nestati\n---\n### Documentazione: \n* Questo algoritmo esegue il flusso del codice in maniera ordinata, gestendo tutti i diversi blocchi di codice tramite INPUT e OUTPUT ben definiti (no rougue variables).\n* Nel main vanno definiti tutti i cicli principali dell'applicazione.\n* Passare le variabili x riferimento\n* ","id":"eba56724701065c2","x":2198,"y":-4286,"width":1260,"height":1060,"color":"3"},
		{"type":"text","text":"op1_trovaDominio (.cpp)\n---\n### Documentazione:\n\n* include tipi definiti x le operazioni del modulo e dei \"sotto-moduli\"","id":"89a8f4d3c32d476b","x":1355,"y":-4211,"width":740,"height":200,"color":"3"},
		{"type":"text","text":"# SceltaPacchiNesting.mod (.cpp)\n---\n### Variabili:\n```cpp\nstd::vector<Pack*> pacchiDaScegliere; //INPUT\nstd::vector<Pack*> pacchiScelti; //OUTPUT1\nstd::vector<Pack*> pacchiScartati; //OUTPUT2, pacchi da riutilizzare nel prossimo giro\n```\n--- \n### Documentazione:\n* questo modulo si occupa di selezionare i pacchi che andranno \"sortati\"\n* Dentro i moduli vanno definiti gli algoritmi stessi, definiti da INPUT e OUTPUT.\n* Le varibili \"rougue\" vanno IL PIU possibile definite dentro i file \"operation\" (funzioni)","id":"a367c10b9edc0b86","x":2330,"y":-6760,"width":885,"height":492,"color":"2"},
		{"type":"text","text":"# spostaPacchi.mod (.cpp) (ALG2)\n---\n### Variabili:\n```cpp\nstd::vector<Pack*> pacchiDaOrdinare; //INPUT\n\n```\n\n---\n### Documentazione:\n* questo modulo si occupa di spostare i pacchi\n* Dentro i moduli vanno definiti gli algoritmi stessi, definiti da INPUT e OUTPUT.\n* Le varibili \"rougue\" vanno IL PIU possibile definite dentro i file \"operation\" (funzioni)","id":"a14f85ca99bcfea0","x":3507,"y":-5143,"width":885,"height":420,"color":"2"},
		{"type":"text","text":"# ottimizzazione.mod (.cpp)\n---\n### Variabili:\n```cpp\nstd::vector<Pack*> pacchiDaOrdinare; //INPUT\n\n```\n\n---\n### Documentazione:\n* questo modulo si occupa di ottimizzare la nuova conf di root\n* Dentro i moduli vanno definiti gli algoritmi stessi, definiti da INPUT e OUTPUT.\n* Le varibili \"rougue\" vanno IL PIU possibile definite dentro i file \"operation\" (funzioni)","id":"92585152bbc439b0","x":3508,"y":-6605,"width":885,"height":420,"color":"2"},
		{"type":"text","text":"# ottimizzazione (.h)\n---\n### Includes:\n```cpp\ninclude \"genericIncludes.h\";\ninclude \"Pack.h\";\n```\n---\n### Documentazione:\n\n* include tipi definiti x le operazioni del modulo e dei \"sotto-moduli\"","id":"f8196faebf241544","x":3580,"y":-6063,"width":740,"height":390,"color":"4"},
		{"type":"text","text":"op1_ottimizzazione (.cpp)\n---\n### Documentazione:\n\n* include tipi definiti x le operazioni del modulo e dei \"sotto-moduli\"","id":"97f40243b7b64c0d","x":3580,"y":-5598,"width":740,"height":200,"color":"3"},
		{"type":"text","text":"# spostaPacchi (.h)\n---\n### Includes:\n```cpp\ninclude \"genericIncludes.h\";\ninclude \"Pack.h\";\n```\n---\n### Documentazione:\n\n* include tipi definiti x le operazioni del modulo e dei \"sotto-moduli\"","id":"f52b1739e70df65f","x":3580,"y":-4601,"width":740,"height":390,"color":"4"},
		{"type":"text","text":"op1_spostaPacchi (.cpp)\n---\n### Documentazione:\n\n* include tipi definiti x le operazioni del modulo e dei \"sotto-moduli\"","id":"63cc5eb39fac95e8","x":3580,"y":-4136,"width":740,"height":200,"color":"3"},
		{"type":"text","text":"# TODO: \n* Definire un include che permetta di definire tipi comuni come puntatori a pacchi ","id":"eeb82e86ddf8bd30","x":456,"y":-5278,"width":480,"height":327,"color":"1"},
		{"type":"text","text":"# Legenda:\n* le frecce di collegamento indicano una \"dipendenza\", ovvero (letteralmente) \"QUESTO file è incluso da QUESTO file\". questo per dare una mano a capire cazzo si sta includendo","id":"1649fbad8d1cf0f0","x":456,"y":-4823,"width":498,"height":327,"color":"1"},
		{"type":"text","text":"# class Pack : 3D_object (.h)\n\n### Variabili:\n\n```cpp\nint packID\nbool rotatable\nbool palletizable\n```\n---\n### Metodi:\n```cpp\nPack()\nPack(float X, float Y, float Z, float WEIGHT, int CODE, bool ROT) {}\n~Pack()\nPack &operator=(const Pack &n) //override \"=\" to make a custom copy constructor\nPack &operator==(const Pack &n) //override \"==\" to confront two \"Pack\" objects\nvoid setRotatable(bool ROT)\nvoid setPackID(int CODE)\nint getPackID()\n```\n---\n### TODO:\n* I metodi sono tutti inerenti alle operazioni che vanno a modificare il singolo pacco, come modificarne le dimensioni, impostare le dimensioni, ruotare il pacco e così via. \n* Necessita di due costruttori separati per permettere l'uso nelle diverse situazioni;\n---\n### Documentazione: \nQuesto oggetto rappresenta il pacco e tutte le sue caratteristiche fisiche e operazioni che vi si possono effettuare.\nNotare come sia possibile effettuare operazioni tramite i normali operatori di C++ come il assegnazione diretta tra pacchi tramite \" = \" o di confronto tramite \" == \".\n","id":"a23529314695cae5","x":-2298,"y":-7711,"width":820,"height":991,"color":"4"},
		{"type":"text","text":"# Pack : 3D_object (.cpp)\n\n### Uso:\n* andare a definire tutte le funzioni Pack\n* andare a fare override delle funzioni \"SET\" di 3D_object x i pacchi","id":"da32a79df4db6eb0","x":-3120,"y":-7391,"width":597,"height":220,"color":"3"},
		{"type":"text","text":"# OrdinamentoPacchi (.h)\n---\n### Includes:\n```cpp\ninclude \"genericIncludes.h\";\ninclude \"Pack.h\";\n```\n---\n### Documentazione:\n\n* include tipi definiti x le operazioni del modulo e dei \"sotto-moduli\"","id":"7d1de0e78f3fc347","x":1355,"y":-6060,"width":740,"height":393,"color":"4"}
	],
	"edges":[
		{"id":"46e7c2b24c42fa5e","fromNode":"9a1e79440b7722be","fromSide":"bottom","toNode":"32936dd609fc592f","toSide":"top","color":"4"},
		{"id":"243ece5f1abae95b","fromNode":"9a1e79440b7722be","fromSide":"left","toNode":"f85fea1dcfbba0a3","toSide":"right","color":"4"},
		{"id":"ad00f52df725908d","fromNode":"341978063eeea840","fromSide":"bottom","toNode":"9a1e79440b7722be","toSide":"top","color":"6"},
		{"id":"1f11edcf19769a1d","fromNode":"341978063eeea840","fromSide":"bottom","toNode":"bcd9347dfc4e83a5","toSide":"top","color":"6"},
		{"id":"0e23c6dbc7510762","fromNode":"bcd9347dfc4e83a5","fromSide":"bottom","toNode":"e4bc571b033bfe8e","toSide":"top","color":"4"},
		{"id":"76fffe88c74a61ee","fromNode":"32936dd609fc592f","fromSide":"left","toNode":"22601776f8ec70d0","toSide":"right","color":"4"},
		{"id":"caf8a7dd8aa0e95c","fromNode":"a23529314695cae5","fromSide":"right","toNode":"9a1e79440b7722be","toSide":"left","color":"4"},
		{"id":"f981e9cc954815c6","fromNode":"341978063eeea840","fromSide":"right","toNode":"4581eeb8e87df3cf","toSide":"left","color":"6"},
		{"id":"c8fc18c8c763a5a1","fromNode":"4581eeb8e87df3cf","fromSide":"right","toNode":"a0494b72f9c94454","toSide":"left","color":"5"},
		{"id":"13c63cb62f693775","fromNode":"a0494b72f9c94454","fromSide":"right","toNode":"020989c845b9390a","toSide":"left","color":"5"},
		{"id":"aaefb54709d282a4","fromNode":"4581eeb8e87df3cf","fromSide":"bottom","toNode":"a6a92968dbf192ec","toSide":"top","color":"5"},
		{"id":"05031e069ac2e329","fromNode":"a0494b72f9c94454","fromSide":"bottom","toNode":"1d11200d1f946bb6","toSide":"top","color":"5"},
		{"id":"637430d45d74084f","fromNode":"020989c845b9390a","fromSide":"bottom","toNode":"69cea4cc5281e303","toSide":"top","color":"5"},
		{"id":"af46391bfb818bdc","fromNode":"a23529314695cae5","fromSide":"left","toNode":"da32a79df4db6eb0","toSide":"right","color":"4"},
		{"id":"4f66b5036519aac5","fromNode":"7d1de0e78f3fc347","fromSide":"top","toNode":"0a522b20fa4bdaea","toSide":"bottom","color":"4"},
		{"id":"d86fa89f138632bc","fromNode":"7d1de0e78f3fc347","fromSide":"bottom","toNode":"613d8e6822959681","toSide":"top","color":"4"},
		{"id":"a6fcee46339fc359","fromNode":"d9bd45575221c7d3","fromSide":"top","toNode":"a367c10b9edc0b86","toSide":"bottom","color":"4"},
		{"id":"76e9fef858922dc9","fromNode":"d9bd45575221c7d3","fromSide":"bottom","toNode":"7fd2b193f9ca4149","toSide":"top","color":"4"},
		{"id":"3b7bb00971b16921","fromNode":"a93d9564772b8144","fromSide":"top","toNode":"ba0e0c21f2d582e8","toSide":"bottom","color":"4"},
		{"id":"5fbc897dbf03ae76","fromNode":"a93d9564772b8144","fromSide":"bottom","toNode":"89a8f4d3c32d476b","toSide":"top","color":"4"},
		{"id":"93bf7d3df0e6023f","fromNode":"f52b1739e70df65f","fromSide":"top","toNode":"a14f85ca99bcfea0","toSide":"bottom","color":"4"},
		{"id":"0e3c86063ca32240","fromNode":"f52b1739e70df65f","fromSide":"bottom","toNode":"63cc5eb39fac95e8","toSide":"top","color":"4"},
		{"id":"84670a755c3dfad7","fromNode":"f8196faebf241544","fromSide":"top","toNode":"92585152bbc439b0","toSide":"bottom","color":"4"},
		{"id":"e55e6283dd6d4ac6","fromNode":"f8196faebf241544","fromSide":"bottom","toNode":"97f40243b7b64c0d","toSide":"top","color":"4"},
		{"id":"bdc7b3b8c2779c32","fromNode":"f8196faebf241544","fromSide":"left","toNode":"e65bf9b7e285edbb","toSide":"right","color":"4"},
		{"id":"1f65c564b5a1d925","fromNode":"f52b1739e70df65f","fromSide":"left","toNode":"e65bf9b7e285edbb","toSide":"right","color":"4"},
		{"id":"4e6a68ccda3f1771","fromNode":"d9bd45575221c7d3","fromSide":"right","toNode":"e65bf9b7e285edbb","toSide":"right","color":"4"},
		{"id":"370b47e8665f83a1","fromNode":"a93d9564772b8144","fromSide":"right","toNode":"e65bf9b7e285edbb","toSide":"left","color":"4"},
		{"id":"062c4ccad7f9d7d1","fromNode":"e65bf9b7e285edbb","fromSide":"bottom","toNode":"eba56724701065c2","toSide":"top","color":"4"},
		{"id":"a53fbd5e7758da6d","fromNode":"7d1de0e78f3fc347","fromSide":"right","toNode":"e65bf9b7e285edbb","toSide":"left","color":"4"},
		{"id":"037f15d1f0d57c12","fromNode":"341978063eeea840","fromSide":"left","toNode":"a23529314695cae5","toSide":"right","color":"6"},
		{"id":"0066fea577a5732b","fromNode":"a23529314695cae5","fromSide":"right","toNode":"4581eeb8e87df3cf","toSide":"left","color":"4"}
	]
}